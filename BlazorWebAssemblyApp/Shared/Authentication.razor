@page "/authentication/{action}"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using RazorClassLibrary.Services

@inject NavigationManager navigationManager
@inject SignOutSessionStateManager SignOutManager
@inject IIdentityService identityService

<RemoteAuthenticatorView Action="@Action" OnLogOutSucceeded=@OnLogOutSucceeded OnLogInSucceeded=@OnLogInSucceeded>
    <LogInFailed>
        <div class="alert alert-danger" role="alert">@strLogInFailed</div>
    </LogInFailed>
    <LogOut>
        <div class="alert alert-info" role="alert">@strLogOut</div>
    </LogOut>
    <LogOutSucceeded>
        <div class="alert alert-success" role="alert">@strLogOutSucceeded</div>
    </LogOutSucceeded>
    <LogOutFailed>
        <div class="alert alert-success" role="alert">@strLogOutFailed</div>
    </LogOutFailed>
    <CompletingLogOut>
        <div class="alert alert-success" role="alert">@strCompletingLogOut</div>
    </CompletingLogOut>
    <LoggingIn>
        <div class="alert alert-info" role="alert">@strLoggingIn</div>
    </LoggingIn>
    <CompletingLoggingIn>
        <div class="alert alert-success" role="alert">@strCompletingLoggingIn</div>
    </CompletingLoggingIn>
</RemoteAuthenticatorView>

@code {
    [Parameter]
    public string Action { get; set; } = default!;

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; } = default!;

    string strLogInFailed = "Your login was not successful.";
    string strLogOut = "Trying to close your session.";
    string strLogOutSucceeded = "Your session has been closed successfully.";
    string strLogOutFailed = "Your log out was not successful.";
    string strCompletingLogOut = "Completing Log out.";
    string strLoggingIn = "Redirecting to the login screen.";
    string strCompletingLoggingIn = "Your login was successful.";

    public async void OnLogInSucceeded()
    {
        var user = (await AuthenticationState).User;
        if (user.Identity!.IsAuthenticated)
        {
            identityService.CurrentUser = new();
            identityService.CurrentUser.Id = user.Claims.FirstOrDefault(c => c.Type == "sub")!.Value;
            identityService.CurrentUser.FirstName = user.Claims.FirstOrDefault(c => c.Type == "given_name")?.Value!;
            identityService.CurrentUser.LastName = user.Claims.FirstOrDefault(c => c.Type == "family_name")?.Value!;
            // Do some stuff
        }
    }

    public void OnLogOutSucceeded()
    {
        // Do some stuff
    }
}